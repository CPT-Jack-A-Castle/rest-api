<?php declare(strict_types=1);

namespace Reconmap\Repositories;

use Reconmap\Models\Vulnerability;
use Reconmap\Repositories\QueryBuilders\InsertQueryBuilder;
use Reconmap\Repositories\QueryBuilders\SelectQueryBuilder;

class VulnerabilityRepository extends MysqlRepository
{
    public const UPDATABLE_COLUMNS_TYPES = [
        'project_id' => 'i',
        'target_id' => 'i',
        'category_id' => 'i',

        'summary' => 's',
        'description' => 's',
        'proof_of_concept' => 's',
        'impact' => 's',
        'solution' => 's',

        'risk' => 's',
        'cvss_score' => 'd',
        'cvss_vector' => 's',

        'status' => 's',
        'substatus' => 's',
    ];

    public function findById(int $id): array
    {
        $queryBuilder = $this->getBaseSelectQueryBuilder();
        $queryBuilder->setWhere('v.id = ?');
        $sql = $queryBuilder->toSql();
        $stmt = $this->db->prepare($sql);
        $stmt->bind_param('i', $id);
        $stmt->execute();
        $result = $stmt->get_result();
        $vulnerability = $result->fetch_assoc();
        $stmt->close();

        return $vulnerability;
    }

    private function getBaseSelectQueryBuilder(): SelectQueryBuilder
    {
        $queryBuilder = new SelectQueryBuilder('vulnerability v');
        $queryBuilder->setColumns('
            v.id, v.insert_ts, v.update_ts, v.summary, v.description, v.proof_of_concept, v.impact, v.solution, v.risk, v.cvss_score, v.cvss_vector, v.status, v.substatus,
            v.category_id, vc.name AS category_name, v.project_id, p.name AS project_name,
            v.target_id, t.name AS target_name, t.kind AS target_kind,
            v.creator_uid, u.full_name AS creator_full_name
        ');
        $queryBuilder->addJoin('INNER JOIN user u ON (u.id = v.creator_uid)');
        $queryBuilder->addJoin('LEFT JOIN vulnerability_category vc ON (vc.id = v.category_id)');
        $queryBuilder->addJoin('LEFT JOIN project p ON (p.id = v.project_id)');
        $queryBuilder->addJoin('LEFT JOIN target t ON (t.id = v.target_id)');
        $queryBuilder->setOrderBy('v.insert_ts DESC');
        return $queryBuilder;
    }

    public function findCountByRisk(): array
    {
        $sql = <<<SQL
        SELECT risk, COUNT(*) AS total
        FROM vulnerability
        GROUP BY risk ORDER BY total DESC;
        SQL;

        $result = $this->db->query($sql);
        return $result->fetch_all(MYSQLI_ASSOC);
    }

    public function findCountByCategory(): array
    {
        $sql = <<<SQL
        SELECT vc.name AS category_name, COUNT(*) AS total
        FROM vulnerability v
        INNER JOIN vulnerability_category vc ON (vc.id = v.category_id)
        GROUP BY category_name ORDER BY total DESC;
        SQL;

        $rs = $this->db->query($sql);
        return $rs->fetch_all(MYSQLI_ASSOC);
    }

    public function findAll(int $page = 0): array
    {
        $queryBuilder = $this->getBaseSelectQueryBuilder();
        $queryBuilder->setLimit('?, ?');
        $sql = $queryBuilder->toSql();

        $limitPerPage = 20;
        $limitOffset = $page * $limitPerPage;

        $stmt = $this->db->prepare($sql);
        $stmt->bind_param('ii', $limitOffset, $limitPerPage);
        $stmt->execute();
        $result = $stmt->get_result();
        return $result->fetch_all(MYSQLI_ASSOC);
    }

    public function findByKeywords(string $keywords, int $page = 0): array
    {
        $queryBuilder = $this->getBaseSelectQueryBuilder();
        $queryBuilder->setWhere('v.summary LIKE ? OR v.description LIKE ?');
        $queryBuilder->setLimit('?, ?');
        $sql = $queryBuilder->toSql();

        $limitPerPage = 20;
        $limitOffset = $page * $limitPerPage;

        $keywordsLike = "%$keywords%";

        $stmt = $this->db->prepare($sql);
        $stmt->bind_param('ssii', $keywordsLike, $keywordsLike, $limitOffset, $limitPerPage);
        $stmt->execute();
        $result = $stmt->get_result();
        return $result->fetch_all(MYSQLI_ASSOC);
    }

    public function countAll(): int
    {
        $sql = <<<SQL
        SELECT COUNT(*) AS total
        FROM vulnerability
        SQL;

        $stmt = $this->db->prepare($sql);
        $stmt->execute();
        $result = $stmt->get_result();
        $row = $result->fetch_assoc();
        return (int)$row['total'];
    }

    public function insert(Vulnerability $vulnerability): int
    {
        $insertQueryBuilder = new InsertQueryBuilder('vulnerability');
        $insertQueryBuilder->setColumns('project_id, target_id, category_id, creator_uid, summary, description, proof_of_concept, impact, solution, risk, cvss_score, cvss_vector');

        $stmt = $this->db->prepare($insertQueryBuilder->toSql());
        $stmt->bind_param('iiiissssssds', $vulnerability->project_id, $vulnerability->target_id, $vulnerability->category_id, $vulnerability->creator_uid, $vulnerability->summary, $vulnerability->description, $vulnerability->proof_of_concept, $vulnerability->impact, $vulnerability->solution, $vulnerability->risk, $vulnerability->cvss_score, $vulnerability->cvss_vector);
        return $this->executeInsertStatement($stmt);
    }

    public function findByProjectId(int $projectId): array
    {
        $selectQueryBuilder = $this->getBaseSelectQueryBuilder();
        $selectQueryBuilder->setWhere('v.project_id = ?');
        $stmt = $this->db->prepare($selectQueryBuilder->toSql());
        $stmt->bind_param('i', $projectId);
        $stmt->execute();
        $result = $stmt->get_result();
        $vulnerabilities = $result->fetch_all(MYSQLI_ASSOC);
        $stmt->close();

        return $vulnerabilities;
    }

    public function deleteById(int $id): bool
    {
        return $this->deleteByTableId('vulnerability', $id);
    }

    public function findByTargetId(int $targetId): array
    {
        $queryBuilder = $this->getBaseSelectQueryBuilder();
        $queryBuilder->setWhere('target_id = ?');
        $sql = $queryBuilder->toSql();

        $stmt = $this->db->prepare($sql);
        $stmt->bind_param('i', $targetId);
        $stmt->execute();
        $result = $stmt->get_result();
        return $result->fetch_all(MYSQLI_ASSOC);
    }

    public function updateById(int $id, array $newColumnValues): bool
    {
        return $this->updateByTableId('vulnerability', $id, $newColumnValues);
    }
}
