<?php declare(strict_types=1);

namespace Reconmap\Controllers\Vulnerabilities\Categories;

use Psr\Http\Message\ServerRequestInterface;
use Reconmap\ControllerTestCase;
use Reconmap\Repositories\VulnerabilityCategoryRepository;
use Reconmap\Services\ActivityPublisherService;
use Reconmap\Services\Security\AuthorisationService;

class DeleteVulnerabilityCategoryControllerTest extends ControllerTestCase
{
    public function testHappyPath()
    {
        $userId = 1;

        $request = $this->createMock(ServerRequestInterface::class);
        $request->expects($this->exactly(2))
            ->method('getAttribute')
            ->withConsecutive(['role'], ['userId'])
            ->willReturnOnConsecutiveCalls('superuser', $userId);

        $mockAuthorisationService = $this->createMock(AuthorisationService::class);
        $mockAuthorisationService->expects($this->once())
            ->method('isRoleAllowed')
            ->with('superuser', 'vulnerabilitycategories.delete')
            ->willReturn(true);

        $mockVulnerabilityCategoryRepository = $this->createPartialMock(VulnerabilityCategoryRepository::class, ['deleteById']);
        $mockVulnerabilityCategoryRepository->expects($this->once())
            ->method('deleteById')
            ->with(53)
            ->willReturn(true);

        $mockActivityPublisherService = $this->createMock(ActivityPublisherService::class);
        $mockActivityPublisherService->expects($this->once())
            ->method('publish');

        $args = [
            'categoryId' => 53
        ];

        $controller = $this->injectController(new DeleteVulnerabilityCategoryController($mockAuthorisationService, $mockActivityPublisherService, $mockVulnerabilityCategoryRepository));
        $response = $controller($request, $args);
        $this->assertGreaterThan(0, $response['success']);
    }
}
