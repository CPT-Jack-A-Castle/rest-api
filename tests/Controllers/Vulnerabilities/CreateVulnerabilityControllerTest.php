<?php declare(strict_types=1);

namespace Reconmap\Controllers\Targets;

use Fig\Http\Message\StatusCodeInterface;
use League\Plates\Engine;
use Psr\Http\Message\ServerRequestInterface;
use Reconmap\Controllers\Vulnerabilities\CreateVulnerabilityController;
use Reconmap\ControllerTestCase;
use Reconmap\Models\Vulnerability;
use Reconmap\Repositories\VulnerabilityRepository;

class CreateVulnerabilityControllerTest extends ControllerTestCase
{
    public function testSuccess(): void
    {
        $userId = 1;

        $request = $this->createMock(ServerRequestInterface::class);
        $request->expects($this->once())
            ->method('getAttribute')
            ->with('userId')
            ->willReturn($userId);
        $request->expects($this->once())
            ->method('getBody')
            ->willReturn(json_encode(['project_id' => 1, 'summary' => 'SQL injection', 'risk' => 'low']));

        $vulnerability = new Vulnerability();
        $vulnerability->project_id = 1;
        $vulnerability->creator_uid = $userId;
        $vulnerability->summary = 'SQL injection';
        $vulnerability->risk = 'low';

        $mockVulnerabilityRepository = $this->createPartialMock(VulnerabilityRepository::class, ['insert']);
        $mockVulnerabilityRepository->expects($this->once())
            ->method('insert')
            ->with($vulnerability)
            ->willReturn(5);

        $controller = $this->injectController(new CreateVulnerabilityController($mockVulnerabilityRepository));
        $response = $controller($request);

        $this->assertEquals(StatusCodeInterface::STATUS_CREATED, $response->getStatusCode());
        $this->assertEquals('{"vulnerabilityId":5}', (string)$response->getBody());
    }
}
