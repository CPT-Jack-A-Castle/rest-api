{"vulnerability_templates":[{"summary":"[XSS] Stored cross-site scripting","description":"Stored cross-site scripting (also known as second-order or persistent XSS) arises when an application receives data from an untrusted source and includes that data within its later HTTP responses in an unsafe way.","proof_of_concept":"","references":"https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\nhttps://en.wikipedia.org/wiki/Cross-site_scripting\nhttps://portswigger.net/web-security/cross-site-scripting/stored","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"4.3","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[XSS] Reflected cross-site scripting","description":"Reflected cross-site scripting (or XSS) arises when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way.","proof_of_concept":"","references":"https://portswigger.net/web-security/cross-site-scripting/reflected","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"4","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[XSS] DOM-based cross-site scripting","description":"DOM Based XSS (or as it is called in some texts, “type-0 XSS”) is an XSS attack wherein the attack payload is executed as a result of modifying the DOM “environment” in the victim’s browser used by the original client side script, so that the client side code runs in an “unexpected” manner. That is, the page itself (the HTTP response that is) does not change, but the client side code contained in the page executes differently due to the malicious modifications that have occurred in the DOM environment.","proof_of_concept":"","references":"https://www.owasp.org/index.php/DOM_Based_XSS\nhttps://portswigger.net/web-security/cross-site-scripting/dom-based","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"4","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[XSS] Cross-site scripting (reflected DOM-based)","description":"Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.\nDOM-based cross-site scripting arises when a script writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.","proof_of_concept":"","references":"https://portswigger.net/kb/issues/00200311_cross-site-scripting-reflected-dom-based","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"4","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[XSS] Cross-site scripting (stored DOM-based)","description":"Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.\nDOM-based cross-site scripting arises when a script writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.","proof_of_concept":"","references":"https://portswigger.net/kb/issues/00200312_cross-site-scripting-stored-dom-based","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"4","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[CSRF] Cross-site request forgery","description":"A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) [9] exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.","proof_of_concept":"","references":"http://cwe.mitre.org/data/definitions/352.html","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"6","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[SSRF] Server Side Request Forgery","description":"Server Side Request Forgery (SSRF) is a vulnerability that appears when an attacker has the ability to create requests from the vulnerable server.\nUsually, Server Side Request Forgery (SSRF) attacks target internal systems behind the firewall that are normally inaccessible from the outside world (but using SSRF it’s possible to access these systems). With SSRF it’s also possible to access services from the same server that is listening on the loopback interface.","proof_of_concept":"","references":"http://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"4","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Buffer Overflow","description":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold or when a program attempts to put data in a memory area past a buffer. In this case, a buffer is a sequential section of memory allocated to contain anything from a character string to an array of integers. Writing outside the bounds of a block of allocated memory can corrupt data, crash the program, or cause the execution of malicious code.","proof_of_concept":"","references":"https://www.owasp.org/index.php/Buffer_Overflow","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"9","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[DoS] Denial of Service","description":"Denial of Service (DoS) is an attack technique with the intent of preventing a web site from serving normal user activity. DoS attacks, which are easily normally applied to the network layer, are also possible at the application layer. These malicious attacks can succeed by starving a system of critical resources, vulnerability exploit, or abuse of functionality.\n\nMany times DoS attacks will attempt to consume all of a web site's available system resources such as: CPU, memory, disk space etc. When any one of these critical resources reach full utilization, the web site will normally be inaccessible.\n\nAs today's web application environments include a web server, database server and an authentication server, DoS at the application layer may target each of these independent components. Unlike DoS at the network layer, where a large number of connection attempts are required, DoS at the application layer is a much simpler task to perform.","proof_of_concept":"","references":"https://en.wikipedia.org/wiki/Denial-of-service_attack","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"3","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[RFI] Remote File Inclusion","description":"Remote File Include (RFI) is an attack technique used to exploit 'dynamic file include' mechanisms in web applications. When web applications take user input (URL, parameter value, etc.) and pass them into file include commands, the web application might be tricked into including remote files with malicious code.\n\nAlmost all web application frameworks support file inclusion. File inclusion is mainly used for packaging common code into separate files that are later referenced by main application modules. When a web application references an include file, the code in this file may be executed implicitly or explicitly by calling specific procedures. If the choice of module to load is based on elements from the HTTP request, the web application might be vulnerable to RFI.","proof_of_concept":"","references":"http://cwe.mitre.org/data/definitions/98.html","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"7","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"SQL Injection","description":"SQL Injection is an attack technique used to exploit applications that construct SQL statements from user-supplied input. When successful, the attacker is able to change the logic of SQL statements executed against the database.\n\nStructured Query Language (SQL) is a specialized programming language for sending queries to databases. The SQL programming language is both an ANSI and an ISO standard, though many database products supporting SQL do so with proprietary extensions to the standard language. Applications often use user-supplied data to create SQL statements. If an application fails to properly construct SQL statements it is possible for an attacker to alter the statement structure and execute unplanned and potentially hostile commands. When such commands are executed, they do so under the context of the user specified by the application executing the statement. This capability allows attackers to gain control of all database resources accessible by that user, up to and including the ability to execute commands on the hosting system.","proof_of_concept":"","references":"https://www.owasp.org/index.php/SQL_Injection","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"8","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Blind SQL Injection","description":"Blind SQL (Structured Query Language) injection is a type of SQL Injection attack that asks the database true or false questions and determines the answer based on the applications response. This attack is often used when the web application is configured to show generic error messages, but has not mitigated the code that is vulnerable to SQL injection. When an attacker exploits SQL injection, sometimes the web application displays error messages from the database complaining that the SQL Query's syntax is incorrect. Blind SQL injection is nearly identical to normal SQL Injection, the only difference being the way the data is retrieved from the database. When the database does not output data to the web page, an attacker is forced to steal data by asking the database a series of true or false questions. This makes exploiting the SQL Injection vulnerability more difficult, but not impossible.","proof_of_concept":"","references":"https://www.owasp.org/index.php/Blind_SQL_Injection","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"8","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Path Traversal","description":"File resources are accessed using references constructed from user-supplied data, allowing a malicious user to access files outside the web root that were not intended to be exposed.","proof_of_concept":"","references":"https://www.owasp.org/index.php/Path_Traversal\nhttp://projects.webappsec.org/w/page/13246952/Path Traversal\nhttp://cwe.mitre.org/data/definitions/22.html","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"4","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[C/C++] Format String","description":"Format String Attacks alter the flow of an application by using string formatting library features to access other memory space. Vulnerabilities occur when user-supplied data are used directly as formatting string input for certain C/C++ functions (e.g. fprintf, printf, sprintf, setproctitle, syslog, ...).","proof_of_concept":"","references":"https://en.wikipedia.org/wiki/Uncontrolled_format_string","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"6","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Integer Overflows","description":"An Integer Overflow is the condition that occurs when the result of an arithmetic operation, such as multiplication or addition, exceeds the maximum size of the integer type used to store it. When an integer overflow occurs, the interpreted value will appear to have “wrapped around” the maximum value and started again at the minimum value, similar to a clock that represents 13:00 by pointing at 1:00.\n\nFor example, an 8-bit signed integer on most common computer architectures has a maximum value of 127 and a minimum value of -128. If a programmer stores the value 127 in such a variable and adds 1 to it, the result should be 128. However, this value exceeds the maximum for this integer type, so the interpreted value will “wrap around” and become -128.","proof_of_concept":"","references":"http://projects.webappsec.org/w/page/13246926/Format String","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"6","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[XXE] XML External Entities","description":"This technique takes advantage of a feature of XML to build documents dynamically at the time of processing. An XML message can either provide data explicitly or by pointing to an URI where the data exists. In the attack technique, external entities may replace the entity value with malicious data, alternate referrals or may compromise the security of the data the server/XML application has access to.","proof_of_concept":"","references":"http://www.securiteam.com/securitynews/6D0100A5PU.html\nhttps://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"8","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Insecure Indexing","description":"Insecure Indexing is a threat to the data confidentiality of the web-site. Indexing web-site contents via a process that has access to files which are not supposed to be publicly accessible has the potential of leaking information about the existence of such files, and about their content. In the process of indexing, such information is collected and stored by the indexing process, which can later be retrieved (albeit not trivially) by a determined attacker, typically through a series of queries to the search engine. The attacker does not thwart the security model of the search engine. As such, this attack is subtle and very hard to detect and to foil - it’s not easy to distinguish the attacker’s queries from a legitimate user’s queries.","proof_of_concept":"","references":"http://cwe.mitre.org/data/definitions/612.html","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"0","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"OpenSSL Heartbleed","description":"The Heartbleed Bug is a serious vulnerability in the popular OpenSSL cryptographic software library. This weakness allows stealing the information protected, under normal conditions, by the SSL/TLS encryption used to secure the Internet. SSL/TLS provides communication security and privacy over the Internet for applications such as web, email, instant messaging (IM) and some virtual private networks (VPNs). The Heartbleed bug allows anyone on the Internet to read the memory of the systems protected by the vulnerable versions of the OpenSSL software. This compromises the secret keys used to identify the service providers and to encrypt the traffic, the names and passwords of the users and the actual content. This allows attackers to eavesdrop on communications, steal data directly from the services and users and to impersonate services and users.","proof_of_concept":"","references":"http://heartbleed.com/","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"7.5","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Open Redirect Vulnerability","description":"Open Redirect, unvalidated redirects and forwards are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance. Unvalidated redirect and forward attacks can also be used to maliciously craft a URL that would pass the application’s access control check and then forward the attacker to privileged functions that they would normally not be able to access.","proof_of_concept":"","references":"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"4.1","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Server-Side Template Injection","description":"User-controlled data is used as a template engine's template, allowing attackers to access the template context and in some cases inject and run arbitrary code in the application server. Template engines are used to render content using dynamic data. This context data is normally controlled by the user and formatted by the template to generate web pages, emails and the like. Template engines allow powerful language expressions to be used in templates in order to render dynamic content, by processing the context data with code constructs such as conditionals, loops, etc. If an attacker is able to control the template to be rendered, they will be able to inject expressions that will expose context data or even run arbitrary commands on the server.","proof_of_concept":"","references":"http://blog.portswigger.net/2015/08/server-side-template-injection.html","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"7.5","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[RCE] Remote Code Execution","description":"Remote code execution can be best described as an action which involves an attacker executing code remotely using system vulnerabilities. Such code can run from a remote server, which means that the attack can originate from anywhere around the world giving the attacker access to the PC. Once a hacker gains access to a system, they’ll be able to make changes within the target computer.","proof_of_concept":"","references":"https://www.owasp.org/index.php/Code_Injection\nhttps://en.wikipedia.org/wiki/Arbitrary_code_execution","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"10","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"File Upload Vulnerability","description":"CWE-434 describes: “Unrestricted Upload of File with Dangerous Type” a system with this weakness may authenticate the upload function but fail to verify or restrict the file to the type intended by the software developer. For example uploading a malware executable instead of a picture file to a photograph sharing website.","proof_of_concept":"","references":"https://cwe.mitre.org/data/definitions/434.html\nhttps://www.owasp.org/index.php/Unrestricted_File_Upload","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"6","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"OS command injection","description":"OS command injection (also known as shell injection) is a web security vulnerability that allows an attacker to execute arbitrary operating system (OS) commands on the server that is running an application, and typically fully compromise the application and all its data. Very often, an attacker can leverage an OS command injection vulnerability to compromise other parts of the hosting infrastructure, exploiting trust relationships to pivot the attack to other systems within the organization.","proof_of_concept":"","references":"https://portswigger.net/web-security/os-command-injection","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"8","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Cleartext submission of password","description":"Some applications transmit passwords over unencrypted connections, making them vulnerable to interception. To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.","proof_of_concept":"","references":"https://portswigger.net/kb/issues/00300100_cleartext-submission-of-password","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"5","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Credit card numbers disclosed","description":"Applications sometimes disclose sensitive financial information such as credit card numbers. Responses containing credit card numbers may not represent any security vulnerability - for example, a number may belong to the logged-in user to whom it is displayed. If a credit card number is identified during a security assessment it should be verified, then application logic reviewed to identify whether its disclosure within the application is necessary and appropriate.","proof_of_concept":"","references":"https://portswigger.net/kb/issues/00600500_credit-card-numbers-disclosed\nhttps://cwe.mitre.org/data/definitions/200.html","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"0","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[HSTS] Strict transport security not enforced","description":"The application fails to prevent users from connecting to it over unencrypted connections. An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool automates this process.\nTo exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.","proof_of_concept":"","references":"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\nhttps://moxie.org/software/sslstrip/\nhttps://hstspreload.org/\nhttps://cwe.mitre.org/data/definitions/523.html","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"3","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Unencrypted communications","description":"The application allows users to connect to it over unencrypted connections. An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.\nTo exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.\nPlease note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.","proof_of_concept":"","references":"https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure\nhttps://wiki.mozilla.org/Security/Server_Side_TLS\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"3","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Directory listing","description":"Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.\nDirectory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.","proof_of_concept":"","references":"https://cwe.mitre.org/data/definitions/538.html\nhttps://cwe.mitre.org/data/definitions/548.html","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"1","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Source code disclosure","description":"Source code intended to be kept server-side can sometimes end up being disclosed to users. Such code may contain sensitive information such as database passwords and secret keys, which may help malicious users formulate attacks against the application.","proof_of_concept":"","references":"https://cwe.mitre.org/data/definitions/18.html\nhttps://cwe.mitre.org/data/definitions/200.html\nhttps://cwe.mitre.org/data/definitions/388.html\nhttps://cwe.mitre.org/data/definitions/540.html\nhttps://cwe.mitre.org/data/definitions/541.html\nhttps://cwe.mitre.org/data/definitions/615.html","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"1","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"SSL Version 2 and 3 Protocol Detected","description":"The remote service accepts connections encrypted using SSL 2.0 and/or SSL 3.0. These versions of SSL are affected by several cryptographic flaws, including: - An insecure padding scheme with CBC ciphers. - Insecure session renegotiation and resumption schemes. An attacker can exploit these flaws to conduct man-in-the-middle attacks or to decrypt communications between the affected service and clients. Although SSL/TLS has a secure means for choosing the highest supported version of the protocol (so that these versions will be used only if the client or server support nothing better), many web browsers implement this in an unsafe way that allows an attacker to downgrade a connection (such as in POODLE). Therefore, it is recommended that these protocols be disabled entirely. NIST has determined that SSL 3.0 is no longer acceptable for secure communications. As of the date of enforcement found in PCI DSS v3.1, any version of SSL will not meet the PCI SSC's definition of 'strong cryptography'.","proof_of_concept":"","references":"https://www.tenable.com/plugins/nessus/20007","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"4.3","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"TLS 1.0 / 1.1 Protocol Detected","description":"The remote service accepts connections encrypted using TLS 1.0. TLS 1.0 has a number of cryptographic design flaws. Modern implementations of TLS 1.0 mitigate these problems, but newer versions of TLS like 1.1 and 1.2 are designed against these flaws and should be used whenever possible. PCI DSS v3.2 requires that TLS 1.0 be disabled entirely by June 30, 2018, except for POS POI terminals (and the SSL/TLS termination points to which they connect) that can be verified as not being susceptible to any known exploits.","proof_of_concept":"","references":"https://www.tenable.com/plugins/nessus/104743","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"1","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Subdomain takeover","description":"Subdomain takeover attacks are a class of security issues where an attacker is able to seize control of an organization's subdomain via cloud services like AWS or Azure. They commonly happen when web projects are ended but the subdomain DNS entries are not fully shut down. The best defense against subdomain takeover is to remove unused DNS entries. Ideally, organizations should also regularly monitor and test where each subdomain is being used. Indirect subdomain takeovers can be prevented by regularly monitoring the presence of all web resources and making sure that no invalid web resources are referenced from webpages.","proof_of_concept":"","references":"https://www.hackerone.com/blog/Guide-Subdomain-Takeovers","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"7","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Improper Authentication","description":"When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.","proof_of_concept":"","references":"https://cwe.mitre.org/data/definitions/287.html","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"5","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Privilege Escalation","description":"Privilege escalation is the result of actions that allows an adversary to obtain a higher level of permissions on a system or network. Certain tools or actions require a higher level of privilege to work and are likely necessary at many points throughout an operation.","proof_of_concept":"","references":"https://attack.mitre.org/tactics/TA0004/","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"7","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[IDOR] Insecure Direct Object Reference","description":"Insecure Direct Object References occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability attackers can bypass authorization and access resources in the system directly, for example database records or files.","proof_of_concept":"","references":"https://wiki.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)\nhttps://portswigger.net/web-security/access-control/idor","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"5","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[Mobile] Insecure Logging","description":"Insecure Insecure Logging vulnerabilities occur when development teams assume that users or malware will not have access to a mobile device’s filesystem and subsequent sensitive information in data-stores on the device. Filesystems are easily accessible.","proof_of_concept":"","references":"https://medium.com/mobile-penetration-testing/01-insecure-logging-a41c41a8e648","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"7","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[Mobile] Hard Coding Issues","description":"Hard Coding Issues occurs when a developer inadvertently places sensitive information or data in a location on the mobile device that is easily accessible by other apps on the device.","proof_of_concept":"","references":"https://medium.com/mobile-penetration-testing/02-hard-coding-issues-fa795c8294c4","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"7","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[Mobile] Access Control Issues","description":"Poor or missing access control schemes allow an adversary to execute functionality they should not be entitled to using an authenticated but lower-privilege user of the mobile app.","proof_of_concept":"","references":"https://medium.com/mobile-penetration-testing/access-control-92e88578d8b6","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"7","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"[Mobile] Insecure Input Validation","description":"Insecure Input Validation allows an attacker to modify or manipulate user-supplied input, which can cause SQL injections, cross-site scripting (XSS) vulnerabilities if the mobile application does not adequately sanitize user input.","proof_of_concept":"","references":"https://medium.com/mobile-penetration-testing/13-insecure-input-validation-part-3-595b1439cd07","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"7","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true},{"summary":"Insecure Deserialization","description":"Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks.","proof_of_concept":"","references":"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A8-Insecure_Deserialization","remediation":null,"impact":null,"solution":null,"risk":"medium","cvss_score":"5","cvss_vector":null,"tags":null,"category_id":null,"category_name":null,"is_template":true}]}